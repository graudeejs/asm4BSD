;	$OpenBSD: syscalls.master,v 1.103 2010/09/20 07:18:03 deraadt Exp $
;	$NetBSD: syscalls.master,v 1.32 1996/04/23 10:24:21 mycroft Exp $

;	@(#)syscalls.master	8.2 (Berkeley) 1/13/94

; OpenBSD system call name/number "master" file.
; (See syscalls.conf to see what it is processed into.)
;
; Fields: number type [type-dependent ...]
;	number	system call number, must be in order
;	type	one of STD, OBSOL, UNIMPL, NODEF, NOARGS, or one of
;		the compatibility options defined in syscalls.conf.
;
; types:
;	STD	always included
;	OBSOL	obsolete, not included in system
;	UNIMPL	unimplemented, not included in system
;	NODEF	included, but don't define the syscall number
;	NOARGS	included, but don't define the syscall args structure
;	INDIR	included, but don't define the syscall args structure,
;		and allow it to be "really" varargs.
;
; The compat options are defined in the syscalls.conf file, and the
; compat option name is prefixed to the syscall name.  Other than
; that, they're like NODEF (for 'compat' options), or STD (for
; 'libcompat' options).
;
; The type-dependent arguments are as follows:
; For STD, NODEF, NOARGS, and compat syscalls:
;	{ pseudo-proto } [alias]
; For other syscalls:
;	[comment]
;
; #ifdef's, etc. may be included, and are copied to the output files.
; #include's are copied to the syscall switch definition file only.

; #include <sys/param.h>
; #include <sys/systm.h>
; #include <sys/signal.h>
; #include <sys/mount.h>
; #include <sys/syscallargs.h>
; #include <sys/poll.h>
; #include <sys/event.h>
; #include <nnpfs/nnpfs_pioctl.h>

; Reserved/unimplemented system calls in the range 0-150 inclusive
; are reserved for use in future Berkeley releases.
; Additional system calls implemented in vendor and other
; redistributions should be placed in the reserved range at the end
; of the current calls.

	SYS_SYSCALL                    = 0 ; int sys_syscall(int number, ...);
	SYS_EXIT                       = 1 ; void sys_exit(int rval);
	SYS_FORK                       = 2 ; int sys_fork(void);
	SYS_READ                       = 3 ; ssize_t sys_read(int fd, void *buf, size_t nbyte);
	SYS_WRITE                      = 4 ; ssize_t sys_write(int fd, const void *buf, size_t nbyte);
	SYS_OPEN                       = 5 ; int sys_open(const char *path, int flags, ... mode_t mode);
	SYS_CLOSE                      = 6 ; int sys_close(int fd);
	SYS_WAIT4                      = 7 ; pid_t sys_wait4(pid_t pid, int *status, int options, struct rusage *rusage);
if defined COMPAT_43
	SYS_CREAT                      = 8 ; int sys_creat(const char *path, mode_t mode);
end if
	SYS_LINK                       = 9 ; int sys_link(const char *path, const char *link);
	SYS_UNLINK                     = 10 ; int sys_unlink(const char *path);
	;SYS_EXECV                     = 11 ; OBSOL
	SYS_CHDIR                      = 12 ; int sys_chdir(const char *path);
	SYS_FCHDIR                     = 13 ; int sys_fchdir(int fd);
	SYS_MKNOD                      = 14 ; int sys_mknod(const char *path, mode_t mode, dev_t dev);
	SYS_CHMOD                      = 15 ; int sys_chmod(const char *path, mode_t mode);
	SYS_CHOWN                      = 16 ; int sys_chown(const char *path, uid_t uid, gid_t gid);
	SYS_OBREAK                     = 17 ; int sys_obreak(char *nsize);
if defined COMPAT_25
	SYS_GETFSSTAT                  = 18 ; int sys_getfsstat(struct statfs *buf, long bufsize, int flags);
end if
if defined COMPAT_43
	SYS_LSEEK                      = 19 ; long sys_lseek(int fd, long offset, int whence);
end if
	SYS_GETPID                     = 20 ; pid_t sys_getpid(void);
	SYS_MOUNT                      = 21 ; int sys_mount(const char *type, const char *path, int flags, void *data);
	SYS_UNMOUNT                    = 22 ; int sys_unmount(const char *path, int flags);
	SYS_SETUID                     = 23 ; int sys_setuid(uid_t uid);
	SYS_GETUID                     = 24 ; uid_t sys_getuid(void);
	SYS_GETEUID                    = 25 ; uid_t sys_geteuid(void);
; #ifdef PTRACE
	SYS_PTRACE                     = 26 ; int sys_ptrace(int req, pid_t pid, caddr_t addr, int data);
; #else
	;SYS_PTRACE                    = 26 ; UNIMPL
; #endif
	SYS_RECVMSG                    = 27 ; ssize_t sys_recvmsg(int s, struct msghdr *msg, int flags);
	SYS_SENDMSG                    = 28 ; ssize_t sys_sendmsg(int s, const struct msghdr *msg, int flags);
	SYS_RECVFROM                   = 29 ; ssize_t sys_recvfrom(int s, void *buf, size_t len, int flags, struct sockaddr *from, socklen_t *fromlenaddr);
	SYS_ACCEPT                     = 30 ; int sys_accept(int s, struct sockaddr *name, socklen_t *anamelen);
	SYS_GETPEERNAME                = 31 ; int sys_getpeername(int fdes, struct sockaddr *asa, socklen_t *alen);
	SYS_GETSOCKNAME                = 32 ; int sys_getsockname(int fdes, struct sockaddr *asa, socklen_t *alen);
	SYS_ACCESS                     = 33 ; int sys_access(const char *path, int flags);
	SYS_CHFLAGS                    = 34 ; int sys_chflags(const char *path, u_int flags);
	SYS_FCHFLAGS                   = 35 ; int sys_fchflags(int fd, u_int flags);
	SYS_SYNC                       = 36 ; void sys_sync(void);
	SYS_KILL                       = 37 ; int sys_kill(int pid, int signum);
if defined COMPAT_43
	SYS_STAT                       = 38 ; int sys_stat(const char *path, struct stat43 *ub);
end if
	SYS_GETPPID                    = 39 ; pid_t sys_getppid(void);
if defined COMPAT_43
	SYS_LSTAT                      = 40 ; int sys_lstat(char *path, struct stat43 *ub);
end if
	SYS_DUP                        = 41 ; int sys_dup(int fd);
	SYS_OPIPE                      = 42 ; int sys_opipe(void);
	SYS_GETEGID                    = 43 ; gid_t sys_getegid(void);
	SYS_PROFIL                     = 44 ; int sys_profil(caddr_t samples, size_t size, u_long offset, u_int scale);
; #ifdef KTRACE
	SYS_KTRACE                     = 45 ; int sys_ktrace(const char *fname, int ops, int facs, pid_t pid);
; #else
	;SYS_KTRACE                    = 45 ; UNIMPL
; #endif
	SYS_SIGACTION                  = 46 ; int sys_sigaction(int signum, const struct sigaction *nsa, struct sigaction *osa);
	SYS_GETGID                     = 47 ; gid_t sys_getgid(void);
	SYS_SIGPROCMASK                = 48 ; int sys_sigprocmask(int how, sigset_t mask);
	SYS_GETLOGIN                   = 49 ; int sys_getlogin(char *namebuf, u_int namelen);
	SYS_SETLOGIN                   = 50 ; int sys_setlogin(const char *namebuf);
; #ifdef ACCOUNTING
	SYS_ACCT                       = 51 ; int sys_acct(const char *path);
; #else
	;SYS_ACCT                      = 51 ; UNIMPL
; #endif
	SYS_SIGPENDING                 = 52 ; int sys_sigpending(void);
	SYS_OSIGALTSTACK               = 53 ; int sys_osigaltstack(const struct osigaltstack *nss, struct osigaltstack *oss);
	SYS_IOCTL                      = 54 ; int sys_ioctl(int fd, u_long com, ... void *data);
	SYS_REBOOT                     = 55 ; int sys_reboot(int opt);
	SYS_REVOKE                     = 56 ; int sys_revoke(const char *path);
	SYS_SYMLINK                    = 57 ; int sys_symlink(const char *path, const char *link);
	SYS_READLINK                   = 58 ; int sys_readlink(const char *path, char *buf, size_t count);
	SYS_EXECVE                     = 59 ; int sys_execve(const char *path, char * const *argp, char * const *envp);
	SYS_UMASK                      = 60 ; mode_t sys_umask(mode_t newmask);
	SYS_CHROOT                     = 61 ; int sys_chroot(const char *path);
if defined COMPAT_43
	SYS_FSTAT                      = 62 ; int sys_fstat(int fd, struct stat43 *sb);
	SYS_GETKERNINFO                = 63 ; int sys_getkerninfo(int op, char *where, int *size, int arg);
	SYS_GETPAGESIZE                = 64 ; int sys_getpagesize(void);
end if
if defined COMPAT_25
	SYS_OMSYNC                     = 65 ; int sys_omsync(caddr_t addr, size_t len);
end if
	SYS_VFORK                      = 66 ; int sys_vfork(void);
	;SYS_VREAD                     = 67 ; OBSOL
	;SYS_VWRITE                    = 68 ; OBSOL
	SYS_SBRK                       = 69 ; int sys_sbrk(int incr);
	SYS_SSTK                       = 70 ; int sys_sstk(int incr);
if defined COMPAT_43
	SYS_MMAP                       = 71 ; int sys_mmap(caddr_t addr, size_t len, int prot, int flags, int fd, long pos);
end if
	;SYS_VADVISE                   = 72 ; OBSOL
	SYS_MUNMAP                     = 73 ; int sys_munmap(void *addr, size_t len);
	SYS_MPROTECT                   = 74 ; int sys_mprotect(void *addr, size_t len, int prot);
	SYS_MADVISE                    = 75 ; int sys_madvise(void *addr, size_t len, int behav);
	;SYS_VHANGUP                   = 76 ; OBSOL
	;SYS_VLIMIT                    = 77 ; OBSOL
	SYS_MINCORE                    = 78 ; int sys_mincore(void *addr, size_t len, char *vec);
	SYS_GETGROUPS                  = 79 ; int sys_getgroups(int gidsetsize, gid_t *gidset);
	SYS_SETGROUPS                  = 80 ; int sys_setgroups(int gidsetsize, const gid_t *gidset);
	SYS_GETPGRP                    = 81 ; int sys_getpgrp(void);
	SYS_SETPGID                    = 82 ; int sys_setpgid(pid_t pid, int pgid);
	SYS_SETITIMER                  = 83 ; int sys_setitimer(int which, const struct itimerval *itv, struct itimerval *oitv);
if defined COMPAT_43
	SYS_WAIT                       = 84 ; int sys_wait(void);
end if
if defined COMPAT_25
	SYS_SWAPON                     = 85 ; int sys_swapon(const char *name);
end if
	SYS_GETITIMER                  = 86 ; int sys_getitimer(int which, struct itimerval *itv);
if defined COMPAT_43
	SYS_GETHOSTNAME                = 87 ; int sys_gethostname(char *hostname, u_int len);
	SYS_SETHOSTNAME                = 88 ; int sys_sethostname(char *hostname, u_int len);
	SYS_GETDTABLESIZE              = 89 ; int sys_getdtablesize(void);
end if
	SYS_DUP2                       = 90 ; int sys_dup2(int from, int to);
	;SYS_GETDOPT                   = 91 ; UNIMPL
	SYS_FCNTL                      = 92 ; int sys_fcntl(int fd, int cmd, ... void *arg);
	SYS_SELECT                     = 93 ; int sys_select(int nd, fd_set *in, fd_set *ou, fd_set *ex, struct timeval *tv);
	;SYS_SETDOPT                   = 94 ; UNIMPL
	SYS_FSYNC                      = 95 ; int sys_fsync(int fd);
	SYS_SETPRIORITY                = 96 ; int sys_setpriority(int which, id_t who, int prio);
	SYS_SOCKET                     = 97 ; int sys_socket(int domain, int type, int protocol);
	SYS_CONNECT                    = 98 ; int sys_connect(int s, const struct sockaddr *name, socklen_t namelen);
if defined COMPAT_43
	SYS_ACCEPT                     = 99 ; int sys_accept(int s, caddr_t name, int *anamelen);
end if
	SYS_GETPRIORITY                = 100 ; int sys_getpriority(int which, id_t who);
if defined COMPAT_43
	SYS_SEND                       = 101 ; int sys_send(int s, caddr_t buf, int len, int flags);
	SYS_RECV                       = 102 ; int sys_recv(int s, caddr_t buf, int len, int flags);
end if
	SYS_SIGRETURN                  = 103 ; int sys_sigreturn(struct sigcontext *sigcntxp);
	SYS_BIND                       = 104 ; int sys_bind(int s, const struct sockaddr *name, socklen_t namelen);
	SYS_SETSOCKOPT                 = 105 ; int sys_setsockopt(int s, int level, int name, const void *val, socklen_t valsize);
	SYS_LISTEN                     = 106 ; int sys_listen(int s, int backlog);
	;SYS_VTIMES                    = 107 ; OBSOL
if defined COMPAT_43
	SYS_SIGVEC                     = 108 ; int sys_sigvec(int signum, struct sigvec *nsv, struct sigvec *osv);
	SYS_SIGBLOCK                   = 109 ; int sys_sigblock(int mask);
	SYS_SIGSETMASK                 = 110 ; int sys_sigsetmask(int mask);
end if
	SYS_SIGSUSPEND                 = 111 ; int sys_sigsuspend(int mask);
if defined COMPAT_43
	SYS_SIGSTACK                   = 112 ; int sys_sigstack(struct sigstack *nss, struct sigstack *oss);
	SYS_RECVMSG                    = 113 ; int sys_recvmsg(int s, struct omsghdr *msg, int flags);
	SYS_SENDMSG                    = 114 ; int sys_sendmsg(int s, caddr_t msg, int flags);
end if
	;SYS_VTRACE                    = 115 ; OBSOL
	SYS_GETTIMEOFDAY               = 116 ; int sys_gettimeofday(struct timeval *tp, struct timezone *tzp);
	SYS_GETRUSAGE                  = 117 ; int sys_getrusage(int who, struct rusage *rusage);
	SYS_GETSOCKOPT                 = 118 ; int sys_getsockopt(int s, int level, int name, void *val, socklen_t *avalsize);
	;SYS_RESUBA                    = 119 ; OBSOL
	SYS_READV                      = 120 ; ssize_t sys_readv(int fd, const struct iovec *iovp, int iovcnt);
	SYS_WRITEV                     = 121 ; ssize_t sys_writev(int fd, const struct iovec *iovp, int iovcnt);
	SYS_SETTIMEOFDAY               = 122 ; int sys_settimeofday(const struct timeval *tv, const struct timezone *tzp);
	SYS_FCHOWN                     = 123 ; int sys_fchown(int fd, uid_t uid, gid_t gid);
	SYS_FCHMOD                     = 124 ; int sys_fchmod(int fd, mode_t mode);
if defined COMPAT_43
	SYS_RECVFROM                   = 125 ; int sys_recvfrom(int s, caddr_t buf, size_t len, int flags, caddr_t from, int *fromlenaddr);
end if
	SYS_SETREUID                   = 126 ; int sys_setreuid(uid_t ruid, uid_t euid);
	SYS_SETREGID                   = 127 ; int sys_setregid(gid_t rgid, gid_t egid);
	SYS_RENAME                     = 128 ; int sys_rename(const char *from, const char *to);
if defined COMPAT_43
	SYS_TRUNCATE                   = 129 ; int sys_truncate(const char *path, long length);
	SYS_FTRUNCATE                  = 130 ; int sys_ftruncate(int fd, long length);
end if
	SYS_FLOCK                      = 131 ; int sys_flock(int fd, int how);
	SYS_MKFIFO                     = 132 ; int sys_mkfifo(const char *path, mode_t mode);
	SYS_SENDTO                     = 133 ; ssize_t sys_sendto(int s, const void *buf, size_t len, int flags, const struct sockaddr *to, socklen_t tolen);
	SYS_SHUTDOWN                   = 134 ; int sys_shutdown(int s, int how);
	SYS_SOCKETPAIR                 = 135 ; int sys_socketpair(int domain, int type, int protocol, int *rsv);
	SYS_MKDIR                      = 136 ; int sys_mkdir(const char *path, mode_t mode);
	SYS_RMDIR                      = 137 ; int sys_rmdir(const char *path);
	SYS_UTIMES                     = 138 ; int sys_utimes(const char *path, const struct timeval *tptr);
	;SYS_4                         = 139 ; OBSOL
	SYS_ADJTIME                    = 140 ; int sys_adjtime(const struct timeval *delta, struct timeval *olddelta);
if defined COMPAT_43
	SYS_GETPEERNAME                = 141 ; int sys_getpeername(int fdes, caddr_t asa, socklen_t *alen);
	SYS_GETHOSTID                  = 142 ; int32_t sys_gethostid(void);
	SYS_SETHOSTID                  = 143 ; int sys_sethostid(int32_t hostid);
	SYS_GETRLIMIT                  = 144 ; int sys_getrlimit(int which, struct ogetrlimit *rlp);
	SYS_SETRLIMIT                  = 145 ; int sys_setrlimit(int which, struct ogetrlimit *rlp);
	SYS_KILLPG                     = 146 ; int sys_killpg(int pgid, int signum);
end if
	SYS_SETSID                     = 147 ; int sys_setsid(void);
	SYS_QUOTACTL                   = 148 ; int sys_quotactl(const char *path, int cmd, int uid, char *arg);
if defined COMPAT_43
	SYS_QUOTA                      = 149 ; int sys_quota(void);
	SYS_GETSOCKNAME                = 150 ; int sys_getsockname(int fdec, caddr_t asa, int *alen);

; Syscalls 151-180 inclusive are reserved for vendor-specific
; system calls.  (This includes various calls added for compatibility
; with other Unix variants.)
; Some of these calls are now supported by BSD...
end if
	;151	UNIMPL
	;152	UNIMPL
	;153	UNIMPL
	;154	UNIMPL
; #if defined(NFSCLIENT) || defined(NFSSERVER)
	SYS_NFSSVC                     = 155 ; int sys_nfssvc(int flag, void *argp);
; #else
	;155	UNIMPL
; #endif
if defined COMPAT_43
	SYS_GETDIRENTRIES              = 156 ; int sys_getdirentries(int fd, char *buf, int count, long *basep);
end if
if defined COMPAT_25
	SYS_STATFS                     = 157 ; int sys_statfs(const char *path, struct ostatfs *buf);
	SYS_FSTATFS                    = 158 ; int sys_fstatfs(int fd, struct ostatfs *buf);
end if
	;159	UNIMPL
	;160	UNIMPL
	SYS_GETFH                      = 161 ; int sys_getfh(const char *fname, fhandle_t *fhp);
if defined COMPAT_09
	SYS_GETDOMAINNAME              = 162 ; int sys_getdomainname(char *domainname, int len);
	SYS_SETDOMAINNAME              = 163 ; int sys_setdomainname(char *domainname, int len);
end if
	;SYS_OUNAME                    = 164 ; UNIMPL
	SYS_SYSARCH                    = 165 ; int sys_sysarch(int op, void *parms);
	;166	UNIMPL
	;167	UNIMPL
	;168	UNIMPL
; #if defined(SYSVSEM) && !defined(__LP64__)
if defined COMPAT_10
	SYS_SEMSYS                     = 169 ; int sys_semsys(int which, int a2, int a3, int a4, int a5);
; #else
end if
	;SYS_1                         = 169 ; UNIMPL
; #endif
; #if defined(SYSVMSG) && !defined(__LP64__)
if defined COMPAT_10
	SYS_MSGSYS                     = 170 ; int sys_msgsys(int which, int a2, int a3, int a4, int a5, int a6);
; #else
end if
	;SYS_1                         = 170 ; UNIMPL
; #endif
; #if defined(SYSVSHM) && !defined(__LP64__)
if defined COMPAT_10
	SYS_SHMSYS                     = 171 ; int sys_shmsys(int which, int a2, int a3, int a4);
; #else
end if
	;SYS_1                         = 171 ; UNIMPL
; #endif
	;172	UNIMPL
	SYS_PREAD                      = 173 ; ssize_t sys_pread(int fd, void *buf, size_t nbyte, int pad, off_t offset);
	SYS_PWRITE                     = 174 ; ssize_t sys_pwrite(int fd, const void *buf, size_t nbyte, int pad, off_t offset);
	;SYS_NTP_GETTIME               = 175 ; UNIMPL
	;SYS_NTP_ADJTIME               = 176 ; UNIMPL
	;177	UNIMPL
	;178	UNIMPL
	;179	UNIMPL
	;180	UNIMPL

; Syscalls 181-199 are used by/reserved for BSD
	SYS_SETGID                     = 181 ; int sys_setgid(gid_t gid);
	SYS_SETEGID                    = 182 ; int sys_setegid(gid_t egid);
	SYS_SETEUID                    = 183 ; int sys_seteuid(uid_t euid);
; #ifdef LFS
	SYS_LFS_BMAPV                  = 184 ; int lfs_bmapv(fsid_t *fsidp, struct block_info *blkiov, int blkcnt);
	SYS_LFS_MARKV                  = 185 ; int lfs_markv(fsid_t *fsidp, struct block_info *blkiov, int blkcnt);
	SYS_LFS_SEGCLEAN               = 186 ; int lfs_segclean(fsid_t *fsidp, u_long segment);
	SYS_LFS_SEGWAIT                = 187 ; int lfs_segwait(fsid_t *fsidp, struct timeval *tv);
; #else
	;184	UNIMPL
	;185	UNIMPL
	;186	UNIMPL
	;187	UNIMPL
; #endif
if defined COMPAT_35
	SYS_STAT                       = 188 ; int sys_stat(const char *path, struct stat35 *ub);
	SYS_FSTAT                      = 189 ; int sys_fstat(int fd, struct stat35 *sb);
	SYS_LSTAT                      = 190 ; int sys_lstat(const char *path, struct stat35 *ub);
end if
	SYS_PATHCONF                   = 191 ; long sys_pathconf(const char *path, int name);
	SYS_FPATHCONF                  = 192 ; long sys_fpathconf(int fd, int name);
	SYS_SWAPCTL                    = 193 ; int sys_swapctl(int cmd, const void *arg, int misc);
	SYS_GETRLIMIT                  = 194 ; int sys_getrlimit(int which, struct rlimit *rlp);
	SYS_SETRLIMIT                  = 195 ; int sys_setrlimit(int which, const struct rlimit *rlp);
	SYS_GETDIRENTRIES              = 196 ; int sys_getdirentries(int fd, char *buf, int count, long *basep);
	SYS_MMAP                       = 197 ; void *sys_mmap(void *addr, size_t len, int prot, int flags, int fd, long pad, off_t pos);
	SYS___SYSCALL                  = 198 ; quad_t sys___syscall(quad_t num, ...);
	SYS_LSEEK                      = 199 ; off_t sys_lseek(int fd, int pad, off_t offset, int whence);
	SYS_TRUNCATE                   = 200 ; int sys_truncate(const char *path, int pad, off_t length);
	SYS_FTRUNCATE                  = 201 ; int sys_ftruncate(int fd, int pad, off_t length);
	SYS___SYSCTL                   = 202 ; int sys___sysctl(int *name, u_int namelen, void *old, size_t *oldlenp, void *new, size_t newlen);
	SYS_MLOCK                      = 203 ; int sys_mlock(const void *addr, size_t len);
	SYS_MUNLOCK                    = 204 ; int sys_munlock(const void *addr, size_t len);
	;SYS_UNDELETE                  = 205 ; UNIMPL
	SYS_FUTIMES                    = 206 ; int sys_futimes(int fd, const struct timeval *tptr);
	SYS_GETPGID                    = 207 ; pid_t sys_getpgid(pid_t pid);
	SYS_NNPFSPIOCTL                = 208 ; int sys_nnpfspioctl(int operation, char *a_pathP, int a_opcode, struct ViceIoctl *a_paramsP, int a_followSymlinks);
	;209	UNIMPL
;
; Syscalls 210-219 are reserved for dynamically loaded syscalls
;
; #ifdef LKM
	;SYS_LKMNOSYS                  = 210 ; int sys_lkmnosys(void);
	;SYS_LKMNOSYS                  = 211 ; int sys_lkmnosys(void);
	;SYS_LKMNOSYS                  = 212 ; int sys_lkmnosys(void);
	;SYS_LKMNOSYS                  = 213 ; int sys_lkmnosys(void);
	;SYS_LKMNOSYS                  = 214 ; int sys_lkmnosys(void);
	;SYS_LKMNOSYS                  = 215 ; int sys_lkmnosys(void);
	;SYS_LKMNOSYS                  = 216 ; int sys_lkmnosys(void);
	;SYS_LKMNOSYS                  = 217 ; int sys_lkmnosys(void);
	;SYS_LKMNOSYS                  = 218 ; int sys_lkmnosys(void);
	;SYS_LKMNOSYS                  = 219 ; int sys_lkmnosys(void);
; #else	/* !LKM */
	;210	UNIMPL
	;211	UNIMPL
	;212	UNIMPL
	;213	UNIMPL
	;214	UNIMPL
	;215	UNIMPL
	;216	UNIMPL
	;217	UNIMPL
	;218	UNIMPL
	;219	UNIMPL
; #endif	/* !LKM */
; System calls 220-240 are reserved for use by OpenBSD
; #ifdef SYSVSEM
	;220	UNIMPL
	SYS_SEMGET                     = 221 ; int sys_semget(key_t key, int nsems, int semflg);
if defined COMPAT_35
	SYS_SEMOP                      = 222 ; int sys_semop(int semid, struct sembuf *sops, u_int nsops);
end if
	;SYS_SEMCONFIG                 = 223 ; OBSOL
; #else
	;SYS_SEMCTL                    = 220 ; UNIMPL
	;SYS_SEMGET                    = 221 ; UNIMPL
	;SYS_SEMOP                     = 222 ; UNIMPL
	;SYS_SEMCONFIG                 = 223 ; UNIMPL
; #endif
; #ifdef SYSVMSG
	;224	UNIMPL
	SYS_MSGGET                     = 225 ; int sys_msgget(key_t key, int msgflg);
	SYS_MSGSND                     = 226 ; int sys_msgsnd(int msqid, const void *msgp, size_t msgsz, int msgflg);
	SYS_MSGRCV                     = 227 ; int sys_msgrcv(int msqid, void *msgp, size_t msgsz, long msgtyp, int msgflg);
; #else
	;SYS_MSGCTL                    = 224 ; UNIMPL
	;SYS_MSGGET                    = 225 ; UNIMPL
	;SYS_MSGSND                    = 226 ; UNIMPL
	;SYS_MSGRCV                    = 227 ; UNIMPL
; #endif
; #ifdef SYSVSHM
	SYS_SHMAT                      = 228 ; void *sys_shmat(int shmid, const void *shmaddr, int shmflg);
	;229	UNIMPL
	SYS_SHMDT                      = 230 ; int sys_shmdt(const void *shmaddr);
if defined COMPAT_35
	SYS_SHMGET                     = 231 ; int sys_shmget(key_t key, int size, int shmflg);
; #else
end if
	;SYS_SHMAT                     = 228 ; UNIMPL
	;SYS_SHMCTL                    = 229 ; UNIMPL
	;SYS_SHMDT                     = 230 ; UNIMPL
	;SYS_SHMGET                    = 231 ; UNIMPL
; #endif
	SYS_CLOCK_GETTIME              = 232 ; int sys_clock_gettime(clockid_t clock_id, struct timespec *tp);
	SYS_CLOCK_SETTIME              = 233 ; int sys_clock_settime(clockid_t clock_id, const struct timespec *tp);
	SYS_CLOCK_GETRES               = 234 ; int sys_clock_getres(clockid_t clock_id, struct timespec *tp);
	;SYS_TIMER_CREATE              = 235 ; UNIMPL
	;SYS_TIMER_DELETE              = 236 ; UNIMPL
	;SYS_TIMER_SETTIME             = 237 ; UNIMPL
	;SYS_TIMER_GETTIME             = 238 ; UNIMPL
	;SYS_TIMER_GETOVERRUN          = 239 ; UNIMPL
;
; System calls 240-249 are reserved for other IEEE Std1003.1b syscalls
;
	SYS_NANOSLEEP                  = 240 ; int sys_nanosleep(const struct timespec *rqtp, struct timespec *rmtp);
	;241	UNIMPL
	;242	UNIMPL
	;243	UNIMPL
	;244	UNIMPL
	;245	UNIMPL
	;246	UNIMPL
	;247	UNIMPL
	;248	UNIMPL
	;249	UNIMPL
	SYS_MINHERIT                   = 250 ; int sys_minherit(void *addr, size_t len, int inherit);
	SYS_RFORK                      = 251 ; int sys_rfork(int flags);
	SYS_POLL                       = 252 ; int sys_poll(struct pollfd *fds, u_int nfds, int timeout);
	SYS_ISSETUGID                  = 253 ; int sys_issetugid(void);
	SYS_LCHOWN                     = 254 ; int sys_lchown(const char *path, uid_t uid, gid_t gid);
	SYS_GETSID                     = 255 ; pid_t sys_getsid(pid_t pid);
	SYS_MSYNC                      = 256 ; int sys_msync(void *addr, size_t len, int flags);
; #ifdef SYSVSEM
if defined COMPAT_35
	SYS___SEMCTL                   = 257 ; int sys___semctl(int semid, int semnum, int cmd, union semun *arg);
; #else
end if
	;257	UNIMPL
; #endif
; #ifdef SYSVSHM
if defined COMPAT_35
	SYS_SHMCTL                     = 258 ; int sys_shmctl(int shmid, int cmd, struct shmid_ds35 *buf);
; #else
end if
	;258	UNIMPL
; #endif
; #ifdef SYSVMSG
if defined COMPAT_35
	SYS_MSGCTL                     = 259 ; int sys_msgctl(int msqid, int cmd, struct msqid_ds35 *buf);
; #else
end if
	;259	UNIMPL
; #endif
	;260	UNIMPL
	;261	UNIMPL
	;262	UNIMPL
	SYS_PIPE                       = 263 ; int sys_pipe(int *fdp);
	SYS_FHOPEN                     = 264 ; int sys_fhopen(const fhandle_t *fhp, int flags);
	;265	UNIMPL
	;266	UNIMPL
	SYS_PREADV                     = 267 ; ssize_t sys_preadv(int fd, const struct iovec *iovp, int iovcnt, int pad, off_t offset);
	SYS_PWRITEV                    = 268 ; ssize_t sys_pwritev(int fd, const struct iovec *iovp, int iovcnt, int pad, off_t offset);
	SYS_KQUEUE                     = 269 ; int sys_kqueue(void);
	SYS_KEVENT                     = 270 ; int sys_kevent(int fd, const struct kevent *changelist, int nchanges, struct kevent *eventlist, int nevents, const struct timespec *timeout);
	SYS_MLOCKALL                   = 271 ; int sys_mlockall(int flags);
	SYS_MUNLOCKALL                 = 272 ; int sys_munlockall(void);
	SYS_GETPEEREID                 = 273 ; int sys_getpeereid(int fdes, uid_t *euid, gid_t *egid);
	;SYS_EXTATTRCTL                = 274 ; UNIMPL
	;SYS_EXTATTR_SET_FILE          = 275 ; UNIMPL
	;SYS_EXTATTR_GET_FILE          = 276 ; UNIMPL
	;SYS_EXTATTR_DELETE_FILE       = 277 ; UNIMPL
	;SYS_EXTATTR_SET_FD            = 278 ; UNIMPL
	;SYS_EXTATTR_GET_FD            = 279 ; UNIMPL
	;SYS_EXTATTR_DELETE_FD         = 280 ; UNIMPL
	SYS_GETRESUID                  = 281 ; int sys_getresuid(uid_t *ruid, uid_t *euid, uid_t *suid);
	SYS_SETRESUID                  = 282 ; int sys_setresuid(uid_t ruid, uid_t euid, uid_t suid);
	SYS_GETRESGID                  = 283 ; int sys_getresgid(gid_t *rgid, gid_t *egid, gid_t *sgid);
	SYS_SETRESGID                  = 284 ; int sys_setresgid(gid_t rgid, gid_t egid, gid_t sgid);
	;SYS_OMQUERY                   = 285 ; OBSOL
	SYS_MQUERY                     = 286 ; void *sys_mquery(void *addr, size_t len, int prot, int flags, int fd, long pad, off_t pos);
	SYS_CLOSEFROM                  = 287 ; int sys_closefrom(int fd);
	SYS_SIGALTSTACK                = 288 ; int sys_sigaltstack(const struct sigaltstack *nss, struct sigaltstack *oss);
; #ifdef SYSVSHM
	SYS_SHMGET                     = 289 ; int sys_shmget(key_t key, size_t size, int shmflg);
; #else
	;SYS_SHMGET                    = 289 ; UNIMPL
; #endif
; #ifdef SYSVSEM
	SYS_SEMOP                      = 290 ; int sys_semop(int semid, struct sembuf *sops, size_t nsops);
; #else
	;SYS_SEMOP                     = 290 ; UNIMPL
; #endif
	SYS_STAT                       = 291 ; int sys_stat(const char *path, struct stat *ub);
	SYS_FSTAT                      = 292 ; int sys_fstat(int fd, struct stat *sb);
	SYS_LSTAT                      = 293 ; int sys_lstat(const char *path, struct stat *ub);
	SYS_FHSTAT                     = 294 ; int sys_fhstat(const fhandle_t *fhp, struct stat *sb);
; #ifdef SYSVSEM
	SYS___SEMCTL                   = 295 ; int sys___semctl(int semid, int semnum, int cmd, union semun *arg);
; #else
	;295	UNIMPL
; #endif
; #ifdef SYSVSHM
	SYS_SHMCTL                     = 296 ; int sys_shmctl(int shmid, int cmd, struct shmid_ds *buf);
; #else
	;296	UNIMPL
; #endif
; #ifdef SYSVMSG
	SYS_MSGCTL                     = 297 ; int sys_msgctl(int msqid, int cmd, struct msqid_ds *buf);
; #else
	;297	UNIMPL
; #endif
	SYS_SCHED_YIELD                = 298 ; int sys_sched_yield(void);
	SYS_GETTHRID                   = 299 ; pid_t sys_getthrid(void);
	SYS_THRSLEEP                   = 300 ; int sys_thrsleep(void *ident, clockid_t clock_id, const struct timespec *tp, void *lock);
	SYS_THRWAKEUP                  = 301 ; int sys_thrwakeup(void *ident, int n);
	SYS_THREXIT                    = 302 ; void sys_threxit(pid_t *notdead);
	SYS_THRSIGDIVERT               = 303 ; int sys_thrsigdivert(sigset_t sigmask, siginfo_t *info, const struct timespec *timeout);
	SYS___GETCWD                   = 304 ; int sys___getcwd(char *buf, size_t len);
	SYS_ADJFREQ                    = 305 ; int sys_adjfreq(const int64_t *freq, int64_t *oldfreq);
	SYS_GETFSSTAT                  = 306 ; int sys_getfsstat(struct statfs *buf, size_t bufsize, int flags);
	SYS_STATFS                     = 307 ; int sys_statfs(const char *path, struct statfs *buf);
	SYS_FSTATFS                    = 308 ; int sys_fstatfs(int fd, struct statfs *buf);
	SYS_FHSTATFS                   = 309 ; int sys_fhstatfs(const fhandle_t *fhp, struct statfs *buf);
	SYS_SETRTABLE                  = 310 ; int sys_setrtable(int rtableid);
	SYS_GETRTABLE                  = 311 ; int sys_getrtable(void);


;==============================================
; Converted with OpenBSD_syscalls4fasm.pl v1.0.0
; http://aldis.git.bsdroot.lv/asm4BSD/

; vim: set ts=8 sw=8 syn=fasm:
