format ELF
public _start

include "../../include/syscalls.fasm"
include "../../include/common.fasm"


SIZEOF_INT			    = 4 ; for 64bit arch should be 8

IOCPARM_SHIFT			    = 13
IOCPARM_MASK			    = (1 shl IOCPARM_SHIFT) - 1
macro IOCPARM_LEN x		    { (x shr 16) and IOCPARM_MASK }
macro IOCBASECMD x		    { x and not (IOCPARM_MASK shl 16) }
macro IOCGROUP x		    { (x shr 8) and 0xFF }
IOC_VOID			    = 0x20000000
IOC_OUT				    = 0x40000000
IOC_IN				    = 0x80000000
IOC_INOUT			    = IOC_OUT or IOC_IN
IOC_DIRMASK			    = IOC_VOID or IOC_OUT or IOC_IN
macro _IOC inout, group, num, len   { push inout or ((len and IOCPARM_MASK) shl 16) or (group shl 8) or num }
macro _IO g, n			    { _IOC IOC_VOID, g, n, 0 }
macro _IOWINT g, n		    { _IOC IOC_VOID, g, n, SIZEOF_INT }
macro _IOR g, n, t		    { _IOC IOC_OUT, g, n, t }	; t must be sizeof
macro _IOW g, n, t		    { _IOC IOC_IN, g, n, t }	; t must be sizeof
macro _IORW g, n, t		    { _IOC IOC_INOUT, g, n, t }	; t must be sizeof

macro MIXER_READ dev		    { _IOR 'M', dev, SIZEOF_INT } 
macro MIXER_WRITE dev		    { _IOW 'M', dev, SIZEOF_INT } 

SOUND_MIXER_NRDEVICES	= 25
SOUND_MIXER_VOLUME	= 0
SOUND_MIXER_BASS	= 1
SOUND_MIXER_TREBLE	= 2
SOUND_MIXER_SYNTH	= 3
SOUND_MIXER_PCM		= 4
SOUND_MIXER_SPEAKER	= 5
SOUND_MIXER_LINE	= 6
SOUND_MIXER_MIC		= 7
SOUND_MIXER_CD		= 8
SOUND_MIXER_IMIX	= 9
SOUND_MIXER_ALTPCM	= 10
SOUND_MIXER_RECLEV	= 11
SOUND_MIXER_IGAIN	= 12
SOUND_MIXER_OGAIN	= 13
SOUND_MIXER_LINE1	= 14
SOUND_MIXER_LINE2	= 15
SOUND_MIXER_LINE3	= 16
SOUND_MIXER_DIGITAL1	= 17
SOUND_MIXER_DIGITAL2	= 18
SOUND_MIXER_DIGITAL3	= 19
SOUND_MIXER_PHONEIN	= 20
SOUND_MIXER_PHONEOUT	= 21
SOUND_MIXER_VIDEO	= 22
SOUND_MIXER_RADIO	= 23
SOUND_MIXER_MONITOR	= 24

SOUND_MASK_VOLUME	= 1 shl SOUND_MIXER_VOLUME
SOUND_MASK_BASS		= 1 shl SOUND_MIXER_BASS
SOUND_MASK_TREBLE	= 1 shl SOUND_MIXER_TREBLE
SOUND_MASK_SYNTH	= 1 shl SOUND_MIXER_SYNTH
SOUND_MASK_PCM		= 1 shl SOUND_MIXER_PCM
SOUND_MASK_SPEAKER	= 1 shl SOUND_MIXER_SPEAKER
SOUND_MASK_LINE		= 1 shl SOUND_MIXER_LINE
SOUND_MASK_MIC		= 1 shl SOUND_MIXER_MIC
SOUND_MASK_CD		= 1 shl SOUND_MIXER_CD
SOUND_MASK_IMIX		= 1 shl SOUND_MIXER_IMIX
SOUND_MASK_ALTPCM	= 1 shl SOUND_MIXER_ALTPCM
SOUND_MASK_RECLEV	= 1 shl SOUND_MIXER_RECLEV
SOUND_MASK_IGAIN	= 1 shl SOUND_MIXER_IGAIN
SOUND_MASK_OGAIN	= 1 shl SOUND_MIXER_OGAIN
SOUND_MASK_LINE1	= 1 shl SOUND_MIXER_LINE1
SOUND_MASK_LINE2	= 1 shl SOUND_MIXER_LINE2
SOUND_MASK_LINE3	= 1 shl SOUND_MIXER_LINE3
SOUND_MASK_DIGITAL1     = 1 shl SOUND_MIXER_DIGITAL1
SOUND_MASK_DIGITAL2     = 1 shl SOUND_MIXER_DIGITAL2
SOUND_MASK_DIGITAL3     = 1 shl SOUND_MIXER_DIGITAL3
SOUND_MASK_PHONEIN      = 1 shl SOUND_MIXER_PHONEIN
SOUND_MASK_PHONEOUT     = 1 shl SOUND_MIXER_PHONEOUT
SOUND_MASK_RADIO        = 1 shl SOUND_MIXER_RADIO
SOUND_MASK_VIDEO        = 1 shl SOUND_MIXER_VIDEO
SOUND_MASK_MONITOR      = 1 shl SOUND_MIXER_MONITOR

section ".text" executable align 16
_start:
    push    rec_buff_len
    call    mmap_alloc
    jc	    error
    mov	    dword[sndbuff_size],rec_buff_len
    mov	    dword[sndbuff],eax


    push    0
    push    O_RDONLY
    push    dsp_dev
    call    open
    jc	    error
    mov	    dword[fd],eax

    push    rec_len
    push    rec
    push    STDOUT
    call    write

    push    dword[sndbuff_size]
    push    dword[sndbuff]
    push    dword[fd]
    call    read
    jc	    error

    push    done_len
    push    done
    push    STDOUT
    call    write


    push    dword[fd]
    call    close

    push    0
    push    O_WRONLY
    push    dsp_dev
    call    open
    jc	    error
    mov	    dword[fd],eax


    push    play_len
    push    play
    push    STDOUT
    call    write

    push    dword[sndbuff_size]
    push    dword[sndbuff]
    push    dword[fd]
    call    write

    push    done_len
    push    done
    push    STDOUT
    call    write


    push    dword[fd]
    call    close
    mov	    dword[fd],-1

    
    push    dword[sndbuff_size]
    push    dword[sndbuff]
    call    munmap

    push    EXIT_SUCCESS
    call    exit

error:
    call    write
    push    EXIT_FAILURE
    call    exit

    include "../../include/system.fasm"

section ".data" writeable align 16
fd		dd  -1
sndbuff		dd  NULL
sndbuff_size	dd  0
dsp_dev		db  "/dev/dsp0.0", 0
rec		db  "Recording...     "
rec_len		=   $-rec
play		db  "Playback...      "
play_len	=   $-play
done		db  "[", 0x1B,"[32mDone", 0x1B, "[39m", "]", 0xA
done_len	=   $-done

rec_lenght	=   5
rec_rate	=   8000
rec_size	=   8
rec_channels	=   1
rec_buff_len	=   rec_lenght * rec_rate * rec_size * rec_channels / 8


; vim: set ts=8 sw=4 sts=4 syn=fasm sts=4:
